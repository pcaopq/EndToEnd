# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tinyxml2', [dirname(__file__)])
        except ImportError:
            import _tinyxml2
            return _tinyxml2
        if fp is not None:
            try:
                _mod = imp.load_module('_tinyxml2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tinyxml2 = swig_import_helper()
    del swig_import_helper
else:
    import _tinyxml2
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def new_intp():
    return _tinyxml2.new_intp()
new_intp = _tinyxml2.new_intp

def copy_intp(value):
    return _tinyxml2.copy_intp(value)
copy_intp = _tinyxml2.copy_intp

def delete_intp(obj):
    return _tinyxml2.delete_intp(obj)
delete_intp = _tinyxml2.delete_intp

def intp_assign(obj, value):
    return _tinyxml2.intp_assign(obj, value)
intp_assign = _tinyxml2.intp_assign

def intp_value(obj):
    return _tinyxml2.intp_value(obj)
intp_value = _tinyxml2.intp_value
class StrPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrPair, name)
    __repr__ = _swig_repr
    NEEDS_ENTITY_PROCESSING = _tinyxml2.StrPair_NEEDS_ENTITY_PROCESSING
    NEEDS_NEWLINE_NORMALIZATION = _tinyxml2.StrPair_NEEDS_NEWLINE_NORMALIZATION
    NEEDS_WHITESPACE_COLLAPSING = _tinyxml2.StrPair_NEEDS_WHITESPACE_COLLAPSING
    TEXT_ELEMENT = _tinyxml2.StrPair_TEXT_ELEMENT
    TEXT_ELEMENT_LEAVE_ENTITIES = _tinyxml2.StrPair_TEXT_ELEMENT_LEAVE_ENTITIES
    ATTRIBUTE_NAME = _tinyxml2.StrPair_ATTRIBUTE_NAME
    ATTRIBUTE_VALUE = _tinyxml2.StrPair_ATTRIBUTE_VALUE
    ATTRIBUTE_VALUE_LEAVE_ENTITIES = _tinyxml2.StrPair_ATTRIBUTE_VALUE_LEAVE_ENTITIES
    COMMENT = _tinyxml2.StrPair_COMMENT

    def __init__(self):
        this = _tinyxml2.new_StrPair()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tinyxml2.delete_StrPair
    __del__ = lambda self: None

    def Set(self, start, end, flags):
        return _tinyxml2.StrPair_Set(self, start, end, flags)

    def GetStr(self):
        return _tinyxml2.StrPair_GetStr(self)

    def Empty(self):
        return _tinyxml2.StrPair_Empty(self)

    def SetInternedStr(self, str):
        return _tinyxml2.StrPair_SetInternedStr(self, str)

    def SetStr(self, str, flags=0):
        return _tinyxml2.StrPair_SetStr(self, str, flags)

    def ParseText(self, arg2, endTag, strFlags):
        return _tinyxml2.StrPair_ParseText(self, arg2, endTag, strFlags)

    def ParseName(self, arg2):
        return _tinyxml2.StrPair_ParseName(self, arg2)

    def TransferTo(self, other):
        return _tinyxml2.StrPair_TransferTo(self, other)
StrPair_swigregister = _tinyxml2.StrPair_swigregister
StrPair_swigregister(StrPair)
cvar = _tinyxml2.cvar
TIXML2_MAJOR_VERSION = cvar.TIXML2_MAJOR_VERSION
TIXML2_MINOR_VERSION = cvar.TIXML2_MINOR_VERSION
TIXML2_PATCH_VERSION = cvar.TIXML2_PATCH_VERSION

class MemPool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemPool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemPool, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyxml2.delete_MemPool
    __del__ = lambda self: None

    def ItemSize(self):
        return _tinyxml2.MemPool_ItemSize(self)

    def Alloc(self):
        return _tinyxml2.MemPool_Alloc(self)

    def Free(self, arg2):
        return _tinyxml2.MemPool_Free(self, arg2)

    def SetTracked(self):
        return _tinyxml2.MemPool_SetTracked(self)

    def Clear(self):
        return _tinyxml2.MemPool_Clear(self)
MemPool_swigregister = _tinyxml2.MemPool_swigregister
MemPool_swigregister(MemPool)

class XMLVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLVisitor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyxml2.delete_XMLVisitor
    __del__ = lambda self: None

    def VisitEnter(self, *args):
        return _tinyxml2.XMLVisitor_VisitEnter(self, *args)

    def VisitExit(self, *args):
        return _tinyxml2.XMLVisitor_VisitExit(self, *args)

    def Visit(self, *args):
        return _tinyxml2.XMLVisitor_Visit(self, *args)

    def __init__(self):
        this = _tinyxml2.new_XMLVisitor()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
XMLVisitor_swigregister = _tinyxml2.XMLVisitor_swigregister
XMLVisitor_swigregister(XMLVisitor)


_tinyxml2.XML_SUCCESS_swigconstant(_tinyxml2)
XML_SUCCESS = _tinyxml2.XML_SUCCESS

_tinyxml2.XML_NO_ERROR_swigconstant(_tinyxml2)
XML_NO_ERROR = _tinyxml2.XML_NO_ERROR

_tinyxml2.XML_NO_ATTRIBUTE_swigconstant(_tinyxml2)
XML_NO_ATTRIBUTE = _tinyxml2.XML_NO_ATTRIBUTE

_tinyxml2.XML_WRONG_ATTRIBUTE_TYPE_swigconstant(_tinyxml2)
XML_WRONG_ATTRIBUTE_TYPE = _tinyxml2.XML_WRONG_ATTRIBUTE_TYPE

_tinyxml2.XML_ERROR_FILE_NOT_FOUND_swigconstant(_tinyxml2)
XML_ERROR_FILE_NOT_FOUND = _tinyxml2.XML_ERROR_FILE_NOT_FOUND

_tinyxml2.XML_ERROR_FILE_COULD_NOT_BE_OPENED_swigconstant(_tinyxml2)
XML_ERROR_FILE_COULD_NOT_BE_OPENED = _tinyxml2.XML_ERROR_FILE_COULD_NOT_BE_OPENED

_tinyxml2.XML_ERROR_FILE_READ_ERROR_swigconstant(_tinyxml2)
XML_ERROR_FILE_READ_ERROR = _tinyxml2.XML_ERROR_FILE_READ_ERROR

_tinyxml2.XML_ERROR_ELEMENT_MISMATCH_swigconstant(_tinyxml2)
XML_ERROR_ELEMENT_MISMATCH = _tinyxml2.XML_ERROR_ELEMENT_MISMATCH

_tinyxml2.XML_ERROR_PARSING_ELEMENT_swigconstant(_tinyxml2)
XML_ERROR_PARSING_ELEMENT = _tinyxml2.XML_ERROR_PARSING_ELEMENT

_tinyxml2.XML_ERROR_PARSING_ATTRIBUTE_swigconstant(_tinyxml2)
XML_ERROR_PARSING_ATTRIBUTE = _tinyxml2.XML_ERROR_PARSING_ATTRIBUTE

_tinyxml2.XML_ERROR_IDENTIFYING_TAG_swigconstant(_tinyxml2)
XML_ERROR_IDENTIFYING_TAG = _tinyxml2.XML_ERROR_IDENTIFYING_TAG

_tinyxml2.XML_ERROR_PARSING_TEXT_swigconstant(_tinyxml2)
XML_ERROR_PARSING_TEXT = _tinyxml2.XML_ERROR_PARSING_TEXT

_tinyxml2.XML_ERROR_PARSING_CDATA_swigconstant(_tinyxml2)
XML_ERROR_PARSING_CDATA = _tinyxml2.XML_ERROR_PARSING_CDATA

_tinyxml2.XML_ERROR_PARSING_COMMENT_swigconstant(_tinyxml2)
XML_ERROR_PARSING_COMMENT = _tinyxml2.XML_ERROR_PARSING_COMMENT

_tinyxml2.XML_ERROR_PARSING_DECLARATION_swigconstant(_tinyxml2)
XML_ERROR_PARSING_DECLARATION = _tinyxml2.XML_ERROR_PARSING_DECLARATION

_tinyxml2.XML_ERROR_PARSING_UNKNOWN_swigconstant(_tinyxml2)
XML_ERROR_PARSING_UNKNOWN = _tinyxml2.XML_ERROR_PARSING_UNKNOWN

_tinyxml2.XML_ERROR_EMPTY_DOCUMENT_swigconstant(_tinyxml2)
XML_ERROR_EMPTY_DOCUMENT = _tinyxml2.XML_ERROR_EMPTY_DOCUMENT

_tinyxml2.XML_ERROR_MISMATCHED_ELEMENT_swigconstant(_tinyxml2)
XML_ERROR_MISMATCHED_ELEMENT = _tinyxml2.XML_ERROR_MISMATCHED_ELEMENT

_tinyxml2.XML_ERROR_PARSING_swigconstant(_tinyxml2)
XML_ERROR_PARSING = _tinyxml2.XML_ERROR_PARSING

_tinyxml2.XML_CAN_NOT_CONVERT_TEXT_swigconstant(_tinyxml2)
XML_CAN_NOT_CONVERT_TEXT = _tinyxml2.XML_CAN_NOT_CONVERT_TEXT

_tinyxml2.XML_NO_TEXT_NODE_swigconstant(_tinyxml2)
XML_NO_TEXT_NODE = _tinyxml2.XML_NO_TEXT_NODE

_tinyxml2.XML_ERROR_COUNT_swigconstant(_tinyxml2)
XML_ERROR_COUNT = _tinyxml2.XML_ERROR_COUNT
class XMLUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLUtil, name)
    __repr__ = _swig_repr
    __swig_getmethods__["SkipWhiteSpace"] = lambda x: _tinyxml2.XMLUtil_SkipWhiteSpace
    if _newclass:
        SkipWhiteSpace = staticmethod(_tinyxml2.XMLUtil_SkipWhiteSpace)
    __swig_getmethods__["IsWhiteSpace"] = lambda x: _tinyxml2.XMLUtil_IsWhiteSpace
    if _newclass:
        IsWhiteSpace = staticmethod(_tinyxml2.XMLUtil_IsWhiteSpace)
    __swig_getmethods__["IsNameStartChar"] = lambda x: _tinyxml2.XMLUtil_IsNameStartChar
    if _newclass:
        IsNameStartChar = staticmethod(_tinyxml2.XMLUtil_IsNameStartChar)
    __swig_getmethods__["IsNameChar"] = lambda x: _tinyxml2.XMLUtil_IsNameChar
    if _newclass:
        IsNameChar = staticmethod(_tinyxml2.XMLUtil_IsNameChar)
    __swig_getmethods__["StringEqual"] = lambda x: _tinyxml2.XMLUtil_StringEqual
    if _newclass:
        StringEqual = staticmethod(_tinyxml2.XMLUtil_StringEqual)
    __swig_getmethods__["IsUTF8Continuation"] = lambda x: _tinyxml2.XMLUtil_IsUTF8Continuation
    if _newclass:
        IsUTF8Continuation = staticmethod(_tinyxml2.XMLUtil_IsUTF8Continuation)
    __swig_getmethods__["ReadBOM"] = lambda x: _tinyxml2.XMLUtil_ReadBOM
    if _newclass:
        ReadBOM = staticmethod(_tinyxml2.XMLUtil_ReadBOM)
    __swig_getmethods__["GetCharacterRef"] = lambda x: _tinyxml2.XMLUtil_GetCharacterRef
    if _newclass:
        GetCharacterRef = staticmethod(_tinyxml2.XMLUtil_GetCharacterRef)
    __swig_getmethods__["ConvertUTF32ToUTF8"] = lambda x: _tinyxml2.XMLUtil_ConvertUTF32ToUTF8
    if _newclass:
        ConvertUTF32ToUTF8 = staticmethod(_tinyxml2.XMLUtil_ConvertUTF32ToUTF8)
    __swig_getmethods__["ToStr"] = lambda x: _tinyxml2.XMLUtil_ToStr
    if _newclass:
        ToStr = staticmethod(_tinyxml2.XMLUtil_ToStr)
    __swig_getmethods__["ToInt"] = lambda x: _tinyxml2.XMLUtil_ToInt
    if _newclass:
        ToInt = staticmethod(_tinyxml2.XMLUtil_ToInt)
    __swig_getmethods__["ToUnsigned"] = lambda x: _tinyxml2.XMLUtil_ToUnsigned
    if _newclass:
        ToUnsigned = staticmethod(_tinyxml2.XMLUtil_ToUnsigned)
    __swig_getmethods__["ToBool"] = lambda x: _tinyxml2.XMLUtil_ToBool
    if _newclass:
        ToBool = staticmethod(_tinyxml2.XMLUtil_ToBool)
    __swig_getmethods__["ToFloat"] = lambda x: _tinyxml2.XMLUtil_ToFloat
    if _newclass:
        ToFloat = staticmethod(_tinyxml2.XMLUtil_ToFloat)
    __swig_getmethods__["ToDouble"] = lambda x: _tinyxml2.XMLUtil_ToDouble
    if _newclass:
        ToDouble = staticmethod(_tinyxml2.XMLUtil_ToDouble)

    def __init__(self):
        this = _tinyxml2.new_XMLUtil()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tinyxml2.delete_XMLUtil
    __del__ = lambda self: None
XMLUtil_swigregister = _tinyxml2.XMLUtil_swigregister
XMLUtil_swigregister(XMLUtil)

def XMLUtil_SkipWhiteSpace(*args):
    return _tinyxml2.XMLUtil_SkipWhiteSpace(*args)
XMLUtil_SkipWhiteSpace = _tinyxml2.XMLUtil_SkipWhiteSpace

def XMLUtil_IsWhiteSpace(p):
    return _tinyxml2.XMLUtil_IsWhiteSpace(p)
XMLUtil_IsWhiteSpace = _tinyxml2.XMLUtil_IsWhiteSpace

def XMLUtil_IsNameStartChar(ch):
    return _tinyxml2.XMLUtil_IsNameStartChar(ch)
XMLUtil_IsNameStartChar = _tinyxml2.XMLUtil_IsNameStartChar

def XMLUtil_IsNameChar(ch):
    return _tinyxml2.XMLUtil_IsNameChar(ch)
XMLUtil_IsNameChar = _tinyxml2.XMLUtil_IsNameChar

def XMLUtil_StringEqual(*args):
    return _tinyxml2.XMLUtil_StringEqual(*args)
XMLUtil_StringEqual = _tinyxml2.XMLUtil_StringEqual

def XMLUtil_IsUTF8Continuation(p):
    return _tinyxml2.XMLUtil_IsUTF8Continuation(p)
XMLUtil_IsUTF8Continuation = _tinyxml2.XMLUtil_IsUTF8Continuation

def XMLUtil_ReadBOM(p, hasBOM):
    return _tinyxml2.XMLUtil_ReadBOM(p, hasBOM)
XMLUtil_ReadBOM = _tinyxml2.XMLUtil_ReadBOM

def XMLUtil_GetCharacterRef(p, value, length):
    return _tinyxml2.XMLUtil_GetCharacterRef(p, value, length)
XMLUtil_GetCharacterRef = _tinyxml2.XMLUtil_GetCharacterRef

def XMLUtil_ConvertUTF32ToUTF8(input, output, length):
    return _tinyxml2.XMLUtil_ConvertUTF32ToUTF8(input, output, length)
XMLUtil_ConvertUTF32ToUTF8 = _tinyxml2.XMLUtil_ConvertUTF32ToUTF8

def XMLUtil_ToStr(*args):
    return _tinyxml2.XMLUtil_ToStr(*args)
XMLUtil_ToStr = _tinyxml2.XMLUtil_ToStr

def XMLUtil_ToInt(str, value):
    return _tinyxml2.XMLUtil_ToInt(str, value)
XMLUtil_ToInt = _tinyxml2.XMLUtil_ToInt

def XMLUtil_ToUnsigned(str, value):
    return _tinyxml2.XMLUtil_ToUnsigned(str, value)
XMLUtil_ToUnsigned = _tinyxml2.XMLUtil_ToUnsigned

def XMLUtil_ToBool(str, value):
    return _tinyxml2.XMLUtil_ToBool(str, value)
XMLUtil_ToBool = _tinyxml2.XMLUtil_ToBool

def XMLUtil_ToFloat(str, value):
    return _tinyxml2.XMLUtil_ToFloat(str, value)
XMLUtil_ToFloat = _tinyxml2.XMLUtil_ToFloat

def XMLUtil_ToDouble(str, value):
    return _tinyxml2.XMLUtil_ToDouble(str, value)
XMLUtil_ToDouble = _tinyxml2.XMLUtil_ToDouble

class XMLNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLNode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDocument(self, *args):
        return _tinyxml2.XMLNode_GetDocument(self, *args)

    def ToElement(self, *args):
        return _tinyxml2.XMLNode_ToElement(self, *args)

    def ToText(self, *args):
        return _tinyxml2.XMLNode_ToText(self, *args)

    def ToComment(self, *args):
        return _tinyxml2.XMLNode_ToComment(self, *args)

    def ToDocument(self, *args):
        return _tinyxml2.XMLNode_ToDocument(self, *args)

    def ToDeclaration(self, *args):
        return _tinyxml2.XMLNode_ToDeclaration(self, *args)

    def ToUnknown(self, *args):
        return _tinyxml2.XMLNode_ToUnknown(self, *args)

    def Value(self):
        return _tinyxml2.XMLNode_Value(self)

    def SetValue(self, val, staticMem=False):
        return _tinyxml2.XMLNode_SetValue(self, val, staticMem)

    def Parent(self, *args):
        return _tinyxml2.XMLNode_Parent(self, *args)

    def NoChildren(self):
        return _tinyxml2.XMLNode_NoChildren(self)

    def FirstChild(self, *args):
        return _tinyxml2.XMLNode_FirstChild(self, *args)

    def FirstChildElement(self, *args):
        return _tinyxml2.XMLNode_FirstChildElement(self, *args)

    def LastChild(self, *args):
        return _tinyxml2.XMLNode_LastChild(self, *args)

    def LastChildElement(self, *args):
        return _tinyxml2.XMLNode_LastChildElement(self, *args)

    def PreviousSibling(self, *args):
        return _tinyxml2.XMLNode_PreviousSibling(self, *args)

    def PreviousSiblingElement(self, *args):
        return _tinyxml2.XMLNode_PreviousSiblingElement(self, *args)

    def NextSibling(self, *args):
        return _tinyxml2.XMLNode_NextSibling(self, *args)

    def NextSiblingElement(self, *args):
        return _tinyxml2.XMLNode_NextSiblingElement(self, *args)

    def InsertEndChild(self, addThis):
        return _tinyxml2.XMLNode_InsertEndChild(self, addThis)

    def LinkEndChild(self, addThis):
        return _tinyxml2.XMLNode_LinkEndChild(self, addThis)

    def InsertFirstChild(self, addThis):
        return _tinyxml2.XMLNode_InsertFirstChild(self, addThis)

    def InsertAfterChild(self, afterThis, addThis):
        return _tinyxml2.XMLNode_InsertAfterChild(self, afterThis, addThis)

    def DeleteChildren(self):
        return _tinyxml2.XMLNode_DeleteChildren(self)

    def DeleteChild(self, node):
        return _tinyxml2.XMLNode_DeleteChild(self, node)

    def ShallowClone(self, document):
        return _tinyxml2.XMLNode_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tinyxml2.XMLNode_ShallowEqual(self, compare)

    def Accept(self, visitor):
        return _tinyxml2.XMLNode_Accept(self, visitor)
XMLNode_swigregister = _tinyxml2.XMLNode_swigregister
XMLNode_swigregister(XMLNode)

class XMLText(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLText, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLText, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Accept(self, visitor):
        return _tinyxml2.XMLText_Accept(self, visitor)

    def ToText(self, *args):
        return _tinyxml2.XMLText_ToText(self, *args)

    def SetCData(self, isCData):
        return _tinyxml2.XMLText_SetCData(self, isCData)

    def CData(self):
        return _tinyxml2.XMLText_CData(self)

    def ShallowClone(self, document):
        return _tinyxml2.XMLText_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tinyxml2.XMLText_ShallowEqual(self, compare)
XMLText_swigregister = _tinyxml2.XMLText_swigregister
XMLText_swigregister(XMLText)

class XMLComment(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLComment, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLComment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToComment(self, *args):
        return _tinyxml2.XMLComment_ToComment(self, *args)

    def Accept(self, visitor):
        return _tinyxml2.XMLComment_Accept(self, visitor)

    def ShallowClone(self, document):
        return _tinyxml2.XMLComment_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tinyxml2.XMLComment_ShallowEqual(self, compare)
XMLComment_swigregister = _tinyxml2.XMLComment_swigregister
XMLComment_swigregister(XMLComment)

class XMLDeclaration(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLDeclaration, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLDeclaration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToDeclaration(self, *args):
        return _tinyxml2.XMLDeclaration_ToDeclaration(self, *args)

    def Accept(self, visitor):
        return _tinyxml2.XMLDeclaration_Accept(self, visitor)

    def ShallowClone(self, document):
        return _tinyxml2.XMLDeclaration_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tinyxml2.XMLDeclaration_ShallowEqual(self, compare)
XMLDeclaration_swigregister = _tinyxml2.XMLDeclaration_swigregister
XMLDeclaration_swigregister(XMLDeclaration)

class XMLUnknown(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLUnknown, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLUnknown, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ToUnknown(self, *args):
        return _tinyxml2.XMLUnknown_ToUnknown(self, *args)

    def Accept(self, visitor):
        return _tinyxml2.XMLUnknown_Accept(self, visitor)

    def ShallowClone(self, document):
        return _tinyxml2.XMLUnknown_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tinyxml2.XMLUnknown_ShallowEqual(self, compare)
XMLUnknown_swigregister = _tinyxml2.XMLUnknown_swigregister
XMLUnknown_swigregister(XMLUnknown)

class XMLAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLAttribute, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self):
        return _tinyxml2.XMLAttribute_Name(self)

    def Value(self):
        return _tinyxml2.XMLAttribute_Value(self)

    def Next(self):
        return _tinyxml2.XMLAttribute_Next(self)

    def IntValue(self):
        return _tinyxml2.XMLAttribute_IntValue(self)

    def UnsignedValue(self):
        return _tinyxml2.XMLAttribute_UnsignedValue(self)

    def BoolValue(self):
        return _tinyxml2.XMLAttribute_BoolValue(self)

    def DoubleValue(self):
        return _tinyxml2.XMLAttribute_DoubleValue(self)

    def FloatValue(self):
        return _tinyxml2.XMLAttribute_FloatValue(self)

    def QueryIntValue(self, value):
        return _tinyxml2.XMLAttribute_QueryIntValue(self, value)

    def QueryUnsignedValue(self, value):
        return _tinyxml2.XMLAttribute_QueryUnsignedValue(self, value)

    def QueryBoolValue(self, value):
        return _tinyxml2.XMLAttribute_QueryBoolValue(self, value)

    def QueryDoubleValue(self, value):
        return _tinyxml2.XMLAttribute_QueryDoubleValue(self, value)

    def QueryFloatValue(self, value):
        return _tinyxml2.XMLAttribute_QueryFloatValue(self, value)

    def SetAttribute(self, *args):
        return _tinyxml2.XMLAttribute_SetAttribute(self, *args)
XMLAttribute_swigregister = _tinyxml2.XMLAttribute_swigregister
XMLAttribute_swigregister(XMLAttribute)

class XMLElement(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLElement, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Name(self):
        return _tinyxml2.XMLElement_Name(self)

    def SetName(self, str, staticMem=False):
        return _tinyxml2.XMLElement_SetName(self, str, staticMem)

    def ToElement(self, *args):
        return _tinyxml2.XMLElement_ToElement(self, *args)

    def Accept(self, visitor):
        return _tinyxml2.XMLElement_Accept(self, visitor)

    def Attribute(self, name, value=None):
        return _tinyxml2.XMLElement_Attribute(self, name, value)

    def IntAttribute(self, name):
        return _tinyxml2.XMLElement_IntAttribute(self, name)

    def UnsignedAttribute(self, name):
        return _tinyxml2.XMLElement_UnsignedAttribute(self, name)

    def BoolAttribute(self, name):
        return _tinyxml2.XMLElement_BoolAttribute(self, name)

    def DoubleAttribute(self, name):
        return _tinyxml2.XMLElement_DoubleAttribute(self, name)

    def FloatAttribute(self, name):
        return _tinyxml2.XMLElement_FloatAttribute(self, name)

    def QueryIntAttribute(self, name, value):
        return _tinyxml2.XMLElement_QueryIntAttribute(self, name, value)

    def QueryUnsignedAttribute(self, name, value):
        return _tinyxml2.XMLElement_QueryUnsignedAttribute(self, name, value)

    def QueryBoolAttribute(self, name, value):
        return _tinyxml2.XMLElement_QueryBoolAttribute(self, name, value)

    def QueryDoubleAttribute(self, name, value):
        return _tinyxml2.XMLElement_QueryDoubleAttribute(self, name, value)

    def QueryFloatAttribute(self, name, value):
        return _tinyxml2.XMLElement_QueryFloatAttribute(self, name, value)

    def QueryAttribute(self, *args):
        return _tinyxml2.XMLElement_QueryAttribute(self, *args)

    def SetAttribute(self, *args):
        return _tinyxml2.XMLElement_SetAttribute(self, *args)

    def DeleteAttribute(self, name):
        return _tinyxml2.XMLElement_DeleteAttribute(self, name)

    def FirstAttribute(self):
        return _tinyxml2.XMLElement_FirstAttribute(self)

    def FindAttribute(self, name):
        return _tinyxml2.XMLElement_FindAttribute(self, name)

    def GetText(self):
        return _tinyxml2.XMLElement_GetText(self)

    def SetText(self, *args):
        return _tinyxml2.XMLElement_SetText(self, *args)

    def QueryIntText(self, ival):
        return _tinyxml2.XMLElement_QueryIntText(self, ival)

    def QueryUnsignedText(self, uval):
        return _tinyxml2.XMLElement_QueryUnsignedText(self, uval)

    def QueryBoolText(self, bval):
        return _tinyxml2.XMLElement_QueryBoolText(self, bval)

    def QueryDoubleText(self, dval):
        return _tinyxml2.XMLElement_QueryDoubleText(self, dval)

    def QueryFloatText(self, fval):
        return _tinyxml2.XMLElement_QueryFloatText(self, fval)
    OPEN = _tinyxml2.XMLElement_OPEN
    CLOSED = _tinyxml2.XMLElement_CLOSED
    CLOSING = _tinyxml2.XMLElement_CLOSING

    def ClosingType(self):
        return _tinyxml2.XMLElement_ClosingType(self)

    def ShallowClone(self, document):
        return _tinyxml2.XMLElement_ShallowClone(self, document)

    def ShallowEqual(self, compare):
        return _tinyxml2.XMLElement_ShallowEqual(self, compare)
XMLElement_swigregister = _tinyxml2.XMLElement_swigregister
XMLElement_swigregister(XMLElement)


_tinyxml2.PRESERVE_WHITESPACE_swigconstant(_tinyxml2)
PRESERVE_WHITESPACE = _tinyxml2.PRESERVE_WHITESPACE

_tinyxml2.COLLAPSE_WHITESPACE_swigconstant(_tinyxml2)
COLLAPSE_WHITESPACE = _tinyxml2.COLLAPSE_WHITESPACE
class XMLDocument(XMLNode):
    __swig_setmethods__ = {}
    for _s in [XMLNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLDocument, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tinyxml2.new_XMLDocument(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tinyxml2.delete_XMLDocument
    __del__ = lambda self: None

    def ToDocument(self, *args):
        return _tinyxml2.XMLDocument_ToDocument(self, *args)

    def Parse(self, *args):
        return _tinyxml2.XMLDocument_Parse(self, *args)

    def LoadFile(self, *args):
        return _tinyxml2.XMLDocument_LoadFile(self, *args)

    def SaveFile(self, *args):
        return _tinyxml2.XMLDocument_SaveFile(self, *args)

    def ProcessEntities(self):
        return _tinyxml2.XMLDocument_ProcessEntities(self)

    def WhitespaceMode(self):
        return _tinyxml2.XMLDocument_WhitespaceMode(self)

    def HasBOM(self):
        return _tinyxml2.XMLDocument_HasBOM(self)

    def SetBOM(self, useBOM):
        return _tinyxml2.XMLDocument_SetBOM(self, useBOM)

    def RootElement(self, *args):
        return _tinyxml2.XMLDocument_RootElement(self, *args)

    def Print(self, streamer=None):
        return _tinyxml2.XMLDocument_Print(self, streamer)

    def Accept(self, visitor):
        return _tinyxml2.XMLDocument_Accept(self, visitor)

    def NewElement(self, name):
        return _tinyxml2.XMLDocument_NewElement(self, name)

    def NewComment(self, comment):
        return _tinyxml2.XMLDocument_NewComment(self, comment)

    def NewText(self, text):
        return _tinyxml2.XMLDocument_NewText(self, text)

    def NewDeclaration(self, text=None):
        return _tinyxml2.XMLDocument_NewDeclaration(self, text)

    def NewUnknown(self, text):
        return _tinyxml2.XMLDocument_NewUnknown(self, text)

    def DeleteNode(self, node):
        return _tinyxml2.XMLDocument_DeleteNode(self, node)

    def SetError(self, error, str1, str2):
        return _tinyxml2.XMLDocument_SetError(self, error, str1, str2)

    def Error(self):
        return _tinyxml2.XMLDocument_Error(self)

    def ErrorID(self):
        return _tinyxml2.XMLDocument_ErrorID(self)

    def ErrorName(self):
        return _tinyxml2.XMLDocument_ErrorName(self)

    def GetErrorStr1(self):
        return _tinyxml2.XMLDocument_GetErrorStr1(self)

    def GetErrorStr2(self):
        return _tinyxml2.XMLDocument_GetErrorStr2(self)

    def PrintError(self):
        return _tinyxml2.XMLDocument_PrintError(self)

    def Clear(self):
        return _tinyxml2.XMLDocument_Clear(self)

    def Identify(self, p, node):
        return _tinyxml2.XMLDocument_Identify(self, p, node)

    def ShallowClone(self, arg2):
        return _tinyxml2.XMLDocument_ShallowClone(self, arg2)

    def ShallowEqual(self, arg2):
        return _tinyxml2.XMLDocument_ShallowEqual(self, arg2)
XMLDocument_swigregister = _tinyxml2.XMLDocument_swigregister
XMLDocument_swigregister(XMLDocument)

class XMLHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tinyxml2.new_XMLHandle(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def FirstChild(self):
        return _tinyxml2.XMLHandle_FirstChild(self)

    def FirstChildElement(self, name=None):
        return _tinyxml2.XMLHandle_FirstChildElement(self, name)

    def LastChild(self):
        return _tinyxml2.XMLHandle_LastChild(self)

    def LastChildElement(self, name=None):
        return _tinyxml2.XMLHandle_LastChildElement(self, name)

    def PreviousSibling(self):
        return _tinyxml2.XMLHandle_PreviousSibling(self)

    def PreviousSiblingElement(self, name=None):
        return _tinyxml2.XMLHandle_PreviousSiblingElement(self, name)

    def NextSibling(self):
        return _tinyxml2.XMLHandle_NextSibling(self)

    def NextSiblingElement(self, name=None):
        return _tinyxml2.XMLHandle_NextSiblingElement(self, name)

    def ToNode(self):
        return _tinyxml2.XMLHandle_ToNode(self)

    def ToElement(self):
        return _tinyxml2.XMLHandle_ToElement(self)

    def ToText(self):
        return _tinyxml2.XMLHandle_ToText(self)

    def ToUnknown(self):
        return _tinyxml2.XMLHandle_ToUnknown(self)

    def ToDeclaration(self):
        return _tinyxml2.XMLHandle_ToDeclaration(self)
    __swig_destroy__ = _tinyxml2.delete_XMLHandle
    __del__ = lambda self: None
XMLHandle_swigregister = _tinyxml2.XMLHandle_swigregister
XMLHandle_swigregister(XMLHandle)

class XMLConstHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLConstHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XMLConstHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _tinyxml2.new_XMLConstHandle(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def FirstChild(self):
        return _tinyxml2.XMLConstHandle_FirstChild(self)

    def FirstChildElement(self, name=None):
        return _tinyxml2.XMLConstHandle_FirstChildElement(self, name)

    def LastChild(self):
        return _tinyxml2.XMLConstHandle_LastChild(self)

    def LastChildElement(self, name=None):
        return _tinyxml2.XMLConstHandle_LastChildElement(self, name)

    def PreviousSibling(self):
        return _tinyxml2.XMLConstHandle_PreviousSibling(self)

    def PreviousSiblingElement(self, name=None):
        return _tinyxml2.XMLConstHandle_PreviousSiblingElement(self, name)

    def NextSibling(self):
        return _tinyxml2.XMLConstHandle_NextSibling(self)

    def NextSiblingElement(self, name=None):
        return _tinyxml2.XMLConstHandle_NextSiblingElement(self, name)

    def ToNode(self):
        return _tinyxml2.XMLConstHandle_ToNode(self)

    def ToElement(self):
        return _tinyxml2.XMLConstHandle_ToElement(self)

    def ToText(self):
        return _tinyxml2.XMLConstHandle_ToText(self)

    def ToUnknown(self):
        return _tinyxml2.XMLConstHandle_ToUnknown(self)

    def ToDeclaration(self):
        return _tinyxml2.XMLConstHandle_ToDeclaration(self)
    __swig_destroy__ = _tinyxml2.delete_XMLConstHandle
    __del__ = lambda self: None
XMLConstHandle_swigregister = _tinyxml2.XMLConstHandle_swigregister
XMLConstHandle_swigregister(XMLConstHandle)

class XMLPrinter(XMLVisitor):
    __swig_setmethods__ = {}
    for _s in [XMLVisitor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XMLPrinter, name, value)
    __swig_getmethods__ = {}
    for _s in [XMLVisitor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XMLPrinter, name)
    __repr__ = _swig_repr

    def __init__(self, file=None, compact=False, depth=0):
        this = _tinyxml2.new_XMLPrinter(file, compact, depth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _tinyxml2.delete_XMLPrinter
    __del__ = lambda self: None

    def PushHeader(self, writeBOM, writeDeclaration):
        return _tinyxml2.XMLPrinter_PushHeader(self, writeBOM, writeDeclaration)

    def OpenElement(self, name, compactMode=False):
        return _tinyxml2.XMLPrinter_OpenElement(self, name, compactMode)

    def PushAttribute(self, *args):
        return _tinyxml2.XMLPrinter_PushAttribute(self, *args)

    def CloseElement(self, compactMode=False):
        return _tinyxml2.XMLPrinter_CloseElement(self, compactMode)

    def PushText(self, *args):
        return _tinyxml2.XMLPrinter_PushText(self, *args)

    def PushComment(self, comment):
        return _tinyxml2.XMLPrinter_PushComment(self, comment)

    def PushDeclaration(self, value):
        return _tinyxml2.XMLPrinter_PushDeclaration(self, value)

    def PushUnknown(self, value):
        return _tinyxml2.XMLPrinter_PushUnknown(self, value)

    def VisitEnter(self, *args):
        return _tinyxml2.XMLPrinter_VisitEnter(self, *args)

    def VisitExit(self, *args):
        return _tinyxml2.XMLPrinter_VisitExit(self, *args)

    def Visit(self, *args):
        return _tinyxml2.XMLPrinter_Visit(self, *args)

    def CStr(self):
        return _tinyxml2.XMLPrinter_CStr(self)

    def CStrSize(self):
        return _tinyxml2.XMLPrinter_CStrSize(self)

    def ClearBuffer(self):
        return _tinyxml2.XMLPrinter_ClearBuffer(self)
XMLPrinter_swigregister = _tinyxml2.XMLPrinter_swigregister
XMLPrinter_swigregister(XMLPrinter)

# This file is compatible with both classic and new-style classes.



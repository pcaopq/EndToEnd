# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_imageseg', [dirname(__file__)])
        except ImportError:
            import _imageseg
            return _imageseg
        if fp is not None:
            try:
                _mod = imp.load_module('_imageseg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _imageseg = swig_import_helper()
    del swig_import_helper
else:
    import _imageseg
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _imageseg.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _imageseg.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _imageseg.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _imageseg.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _imageseg.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _imageseg.SwigPyIterator_equal(self, x)

    def copy(self):
        return _imageseg.SwigPyIterator_copy(self)

    def next(self):
        return _imageseg.SwigPyIterator_next(self)

    def __next__(self):
        return _imageseg.SwigPyIterator___next__(self)

    def previous(self):
        return _imageseg.SwigPyIterator_previous(self)

    def advance(self, n):
        return _imageseg.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _imageseg.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _imageseg.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _imageseg.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _imageseg.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _imageseg.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _imageseg.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _imageseg.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_intp():
    return _imageseg.new_intp()
new_intp = _imageseg.new_intp

def copy_intp(value):
    return _imageseg.copy_intp(value)
copy_intp = _imageseg.copy_intp

def delete_intp(obj):
    return _imageseg.delete_intp(obj)
delete_intp = _imageseg.delete_intp

def intp_assign(obj, value):
    return _imageseg.intp_assign(obj, value)
intp_assign = _imageseg.intp_assign

def intp_value(obj):
    return _imageseg.intp_value(obj)
intp_value = _imageseg.intp_value
class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _imageseg.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _imageseg.vectori___nonzero__(self)

    def __bool__(self):
        return _imageseg.vectori___bool__(self)

    def __len__(self):
        return _imageseg.vectori___len__(self)

    def __getslice__(self, i, j):
        return _imageseg.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _imageseg.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _imageseg.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _imageseg.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _imageseg.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _imageseg.vectori___setitem__(self, *args)

    def pop(self):
        return _imageseg.vectori_pop(self)

    def append(self, x):
        return _imageseg.vectori_append(self, x)

    def empty(self):
        return _imageseg.vectori_empty(self)

    def size(self):
        return _imageseg.vectori_size(self)

    def swap(self, v):
        return _imageseg.vectori_swap(self, v)

    def begin(self):
        return _imageseg.vectori_begin(self)

    def end(self):
        return _imageseg.vectori_end(self)

    def rbegin(self):
        return _imageseg.vectori_rbegin(self)

    def rend(self):
        return _imageseg.vectori_rend(self)

    def clear(self):
        return _imageseg.vectori_clear(self)

    def get_allocator(self):
        return _imageseg.vectori_get_allocator(self)

    def pop_back(self):
        return _imageseg.vectori_pop_back(self)

    def erase(self, *args):
        return _imageseg.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _imageseg.new_vectori(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _imageseg.vectori_push_back(self, x)

    def front(self):
        return _imageseg.vectori_front(self)

    def back(self):
        return _imageseg.vectori_back(self)

    def assign(self, n, x):
        return _imageseg.vectori_assign(self, n, x)

    def resize(self, *args):
        return _imageseg.vectori_resize(self, *args)

    def insert(self, *args):
        return _imageseg.vectori_insert(self, *args)

    def reserve(self, n):
        return _imageseg.vectori_reserve(self, n)

    def capacity(self):
        return _imageseg.vectori_capacity(self)
    __swig_destroy__ = _imageseg.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _imageseg.vectori_swigregister
vectori_swigregister(vectori)

class vectorb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorb, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _imageseg.vectorb_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _imageseg.vectorb___nonzero__(self)

    def __bool__(self):
        return _imageseg.vectorb___bool__(self)

    def __len__(self):
        return _imageseg.vectorb___len__(self)

    def __getslice__(self, i, j):
        return _imageseg.vectorb___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _imageseg.vectorb___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _imageseg.vectorb___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _imageseg.vectorb___delitem__(self, *args)

    def __getitem__(self, *args):
        return _imageseg.vectorb___getitem__(self, *args)

    def __setitem__(self, *args):
        return _imageseg.vectorb___setitem__(self, *args)

    def pop(self):
        return _imageseg.vectorb_pop(self)

    def append(self, x):
        return _imageseg.vectorb_append(self, x)

    def empty(self):
        return _imageseg.vectorb_empty(self)

    def size(self):
        return _imageseg.vectorb_size(self)

    def swap(self, v):
        return _imageseg.vectorb_swap(self, v)

    def begin(self):
        return _imageseg.vectorb_begin(self)

    def end(self):
        return _imageseg.vectorb_end(self)

    def rbegin(self):
        return _imageseg.vectorb_rbegin(self)

    def rend(self):
        return _imageseg.vectorb_rend(self)

    def clear(self):
        return _imageseg.vectorb_clear(self)

    def get_allocator(self):
        return _imageseg.vectorb_get_allocator(self)

    def pop_back(self):
        return _imageseg.vectorb_pop_back(self)

    def erase(self, *args):
        return _imageseg.vectorb_erase(self, *args)

    def __init__(self, *args):
        this = _imageseg.new_vectorb(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _imageseg.vectorb_push_back(self, x)

    def front(self):
        return _imageseg.vectorb_front(self)

    def back(self):
        return _imageseg.vectorb_back(self)

    def assign(self, n, x):
        return _imageseg.vectorb_assign(self, n, x)

    def resize(self, *args):
        return _imageseg.vectorb_resize(self, *args)

    def insert(self, *args):
        return _imageseg.vectorb_insert(self, *args)

    def reserve(self, n):
        return _imageseg.vectorb_reserve(self, n)

    def capacity(self):
        return _imageseg.vectorb_capacity(self)
    __swig_destroy__ = _imageseg.delete_vectorb
    __del__ = lambda self: None
vectorb_swigregister = _imageseg.vectorb_swigregister
vectorb_swigregister(vectorb)

class vectorf1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf1, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _imageseg.vectorf1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _imageseg.vectorf1___nonzero__(self)

    def __bool__(self):
        return _imageseg.vectorf1___bool__(self)

    def __len__(self):
        return _imageseg.vectorf1___len__(self)

    def __getslice__(self, i, j):
        return _imageseg.vectorf1___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _imageseg.vectorf1___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _imageseg.vectorf1___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _imageseg.vectorf1___delitem__(self, *args)

    def __getitem__(self, *args):
        return _imageseg.vectorf1___getitem__(self, *args)

    def __setitem__(self, *args):
        return _imageseg.vectorf1___setitem__(self, *args)

    def pop(self):
        return _imageseg.vectorf1_pop(self)

    def append(self, x):
        return _imageseg.vectorf1_append(self, x)

    def empty(self):
        return _imageseg.vectorf1_empty(self)

    def size(self):
        return _imageseg.vectorf1_size(self)

    def swap(self, v):
        return _imageseg.vectorf1_swap(self, v)

    def begin(self):
        return _imageseg.vectorf1_begin(self)

    def end(self):
        return _imageseg.vectorf1_end(self)

    def rbegin(self):
        return _imageseg.vectorf1_rbegin(self)

    def rend(self):
        return _imageseg.vectorf1_rend(self)

    def clear(self):
        return _imageseg.vectorf1_clear(self)

    def get_allocator(self):
        return _imageseg.vectorf1_get_allocator(self)

    def pop_back(self):
        return _imageseg.vectorf1_pop_back(self)

    def erase(self, *args):
        return _imageseg.vectorf1_erase(self, *args)

    def __init__(self, *args):
        this = _imageseg.new_vectorf1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _imageseg.vectorf1_push_back(self, x)

    def front(self):
        return _imageseg.vectorf1_front(self)

    def back(self):
        return _imageseg.vectorf1_back(self)

    def assign(self, n, x):
        return _imageseg.vectorf1_assign(self, n, x)

    def resize(self, *args):
        return _imageseg.vectorf1_resize(self, *args)

    def insert(self, *args):
        return _imageseg.vectorf1_insert(self, *args)

    def reserve(self, n):
        return _imageseg.vectorf1_reserve(self, n)

    def capacity(self):
        return _imageseg.vectorf1_capacity(self)
    __swig_destroy__ = _imageseg.delete_vectorf1
    __del__ = lambda self: None
vectorf1_swigregister = _imageseg.vectorf1_swigregister
vectorf1_swigregister(vectorf1)

class vectorf2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _imageseg.vectorf2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _imageseg.vectorf2___nonzero__(self)

    def __bool__(self):
        return _imageseg.vectorf2___bool__(self)

    def __len__(self):
        return _imageseg.vectorf2___len__(self)

    def __getslice__(self, i, j):
        return _imageseg.vectorf2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _imageseg.vectorf2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _imageseg.vectorf2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _imageseg.vectorf2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _imageseg.vectorf2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _imageseg.vectorf2___setitem__(self, *args)

    def pop(self):
        return _imageseg.vectorf2_pop(self)

    def append(self, x):
        return _imageseg.vectorf2_append(self, x)

    def empty(self):
        return _imageseg.vectorf2_empty(self)

    def size(self):
        return _imageseg.vectorf2_size(self)

    def swap(self, v):
        return _imageseg.vectorf2_swap(self, v)

    def begin(self):
        return _imageseg.vectorf2_begin(self)

    def end(self):
        return _imageseg.vectorf2_end(self)

    def rbegin(self):
        return _imageseg.vectorf2_rbegin(self)

    def rend(self):
        return _imageseg.vectorf2_rend(self)

    def clear(self):
        return _imageseg.vectorf2_clear(self)

    def get_allocator(self):
        return _imageseg.vectorf2_get_allocator(self)

    def pop_back(self):
        return _imageseg.vectorf2_pop_back(self)

    def erase(self, *args):
        return _imageseg.vectorf2_erase(self, *args)

    def __init__(self, *args):
        this = _imageseg.new_vectorf2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _imageseg.vectorf2_push_back(self, x)

    def front(self):
        return _imageseg.vectorf2_front(self)

    def back(self):
        return _imageseg.vectorf2_back(self)

    def assign(self, n, x):
        return _imageseg.vectorf2_assign(self, n, x)

    def resize(self, *args):
        return _imageseg.vectorf2_resize(self, *args)

    def insert(self, *args):
        return _imageseg.vectorf2_insert(self, *args)

    def reserve(self, n):
        return _imageseg.vectorf2_reserve(self, n)

    def capacity(self):
        return _imageseg.vectorf2_capacity(self)
    __swig_destroy__ = _imageseg.delete_vectorf2
    __del__ = lambda self: None
vectorf2_swigregister = _imageseg.vectorf2_swigregister
vectorf2_swigregister(vectorf2)

class vectorf3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf3, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _imageseg.vectorf3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _imageseg.vectorf3___nonzero__(self)

    def __bool__(self):
        return _imageseg.vectorf3___bool__(self)

    def __len__(self):
        return _imageseg.vectorf3___len__(self)

    def __getslice__(self, i, j):
        return _imageseg.vectorf3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _imageseg.vectorf3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _imageseg.vectorf3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _imageseg.vectorf3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _imageseg.vectorf3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _imageseg.vectorf3___setitem__(self, *args)

    def pop(self):
        return _imageseg.vectorf3_pop(self)

    def append(self, x):
        return _imageseg.vectorf3_append(self, x)

    def empty(self):
        return _imageseg.vectorf3_empty(self)

    def size(self):
        return _imageseg.vectorf3_size(self)

    def swap(self, v):
        return _imageseg.vectorf3_swap(self, v)

    def begin(self):
        return _imageseg.vectorf3_begin(self)

    def end(self):
        return _imageseg.vectorf3_end(self)

    def rbegin(self):
        return _imageseg.vectorf3_rbegin(self)

    def rend(self):
        return _imageseg.vectorf3_rend(self)

    def clear(self):
        return _imageseg.vectorf3_clear(self)

    def get_allocator(self):
        return _imageseg.vectorf3_get_allocator(self)

    def pop_back(self):
        return _imageseg.vectorf3_pop_back(self)

    def erase(self, *args):
        return _imageseg.vectorf3_erase(self, *args)

    def __init__(self, *args):
        this = _imageseg.new_vectorf3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _imageseg.vectorf3_push_back(self, x)

    def front(self):
        return _imageseg.vectorf3_front(self)

    def back(self):
        return _imageseg.vectorf3_back(self)

    def assign(self, n, x):
        return _imageseg.vectorf3_assign(self, n, x)

    def resize(self, *args):
        return _imageseg.vectorf3_resize(self, *args)

    def insert(self, *args):
        return _imageseg.vectorf3_insert(self, *args)

    def reserve(self, n):
        return _imageseg.vectorf3_reserve(self, n)

    def capacity(self):
        return _imageseg.vectorf3_capacity(self)
    __swig_destroy__ = _imageseg.delete_vectorf3
    __del__ = lambda self: None
vectorf3_swigregister = _imageseg.vectorf3_swigregister
vectorf3_swigregister(vectorf3)

class rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _imageseg.rect_left_set
    __swig_getmethods__["left"] = _imageseg.rect_left_get
    if _newclass:
        left = _swig_property(_imageseg.rect_left_get, _imageseg.rect_left_set)
    __swig_setmethods__["right"] = _imageseg.rect_right_set
    __swig_getmethods__["right"] = _imageseg.rect_right_get
    if _newclass:
        right = _swig_property(_imageseg.rect_right_get, _imageseg.rect_right_set)
    __swig_setmethods__["top"] = _imageseg.rect_top_set
    __swig_getmethods__["top"] = _imageseg.rect_top_get
    if _newclass:
        top = _swig_property(_imageseg.rect_top_get, _imageseg.rect_top_set)
    __swig_setmethods__["bottom"] = _imageseg.rect_bottom_set
    __swig_getmethods__["bottom"] = _imageseg.rect_bottom_get
    if _newclass:
        bottom = _swig_property(_imageseg.rect_bottom_get, _imageseg.rect_bottom_set)

    def __init__(self):
        this = _imageseg.new_rect()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _imageseg.delete_rect
    __del__ = lambda self: None
rect_swigregister = _imageseg.rect_swigregister
rect_swigregister(rect)

class pattern(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pattern, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rects"] = _imageseg.pattern_rects_set
    __swig_getmethods__["rects"] = _imageseg.pattern_rects_get
    if _newclass:
        rects = _swig_property(_imageseg.pattern_rects_get, _imageseg.pattern_rects_set)
    __swig_setmethods__["bp_density"] = _imageseg.pattern_bp_density_set
    __swig_getmethods__["bp_density"] = _imageseg.pattern_bp_density_get
    if _newclass:
        bp_density = _swig_property(_imageseg.pattern_bp_density_get, _imageseg.pattern_bp_density_set)
    __swig_setmethods__["vbrl"] = _imageseg.pattern_vbrl_set
    __swig_getmethods__["vbrl"] = _imageseg.pattern_vbrl_get
    if _newclass:
        vbrl = _swig_property(_imageseg.pattern_vbrl_get, _imageseg.pattern_vbrl_set)
    __swig_setmethods__["sp"] = _imageseg.pattern_sp_set
    __swig_getmethods__["sp"] = _imageseg.pattern_sp_get
    if _newclass:
        sp = _swig_property(_imageseg.pattern_sp_get, _imageseg.pattern_sp_set)
    __swig_setmethods__["mbrl"] = _imageseg.pattern_mbrl_set
    __swig_getmethods__["mbrl"] = _imageseg.pattern_mbrl_get
    if _newclass:
        mbrl = _swig_property(_imageseg.pattern_mbrl_get, _imageseg.pattern_mbrl_set)
    __swig_setmethods__["nbr"] = _imageseg.pattern_nbr_set
    __swig_getmethods__["nbr"] = _imageseg.pattern_nbr_get
    if _newclass:
        nbr = _swig_property(_imageseg.pattern_nbr_get, _imageseg.pattern_nbr_set)
    __swig_setmethods__["left"] = _imageseg.pattern_left_set
    __swig_getmethods__["left"] = _imageseg.pattern_left_get
    if _newclass:
        left = _swig_property(_imageseg.pattern_left_get, _imageseg.pattern_left_set)
    __swig_setmethods__["right"] = _imageseg.pattern_right_set
    __swig_getmethods__["right"] = _imageseg.pattern_right_get
    if _newclass:
        right = _swig_property(_imageseg.pattern_right_get, _imageseg.pattern_right_set)
    __swig_setmethods__["top"] = _imageseg.pattern_top_set
    __swig_getmethods__["top"] = _imageseg.pattern_top_get
    if _newclass:
        top = _swig_property(_imageseg.pattern_top_get, _imageseg.pattern_top_set)
    __swig_setmethods__["bottom"] = _imageseg.pattern_bottom_set
    __swig_getmethods__["bottom"] = _imageseg.pattern_bottom_get
    if _newclass:
        bottom = _swig_property(_imageseg.pattern_bottom_get, _imageseg.pattern_bottom_set)
    __swig_setmethods__["width"] = _imageseg.pattern_width_set
    __swig_getmethods__["width"] = _imageseg.pattern_width_get
    if _newclass:
        width = _swig_property(_imageseg.pattern_width_get, _imageseg.pattern_width_set)
    __swig_setmethods__["height"] = _imageseg.pattern_height_set
    __swig_getmethods__["height"] = _imageseg.pattern_height_get
    if _newclass:
        height = _swig_property(_imageseg.pattern_height_get, _imageseg.pattern_height_set)
    __swig_setmethods__["area"] = _imageseg.pattern_area_set
    __swig_getmethods__["area"] = _imageseg.pattern_area_get
    if _newclass:
        area = _swig_property(_imageseg.pattern_area_get, _imageseg.pattern_area_set)
    __swig_setmethods__["num_bp"] = _imageseg.pattern_num_bp_set
    __swig_getmethods__["num_bp"] = _imageseg.pattern_num_bp_get
    if _newclass:
        num_bp = _swig_property(_imageseg.pattern_num_bp_get, _imageseg.pattern_num_bp_set)
    __swig_setmethods__["type"] = _imageseg.pattern_type_set
    __swig_getmethods__["type"] = _imageseg.pattern_type_get
    if _newclass:
        type = _swig_property(_imageseg.pattern_type_get, _imageseg.pattern_type_set)

    def __init__(self):
        this = _imageseg.new_pattern()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _imageseg.delete_pattern
    __del__ = lambda self: None
pattern_swigregister = _imageseg.pattern_swigregister
pattern_swigregister(pattern)

class block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["patterns"] = _imageseg.block_patterns_set
    __swig_getmethods__["patterns"] = _imageseg.block_patterns_get
    if _newclass:
        patterns = _swig_property(_imageseg.block_patterns_get, _imageseg.block_patterns_set)
    __swig_setmethods__["left"] = _imageseg.block_left_set
    __swig_getmethods__["left"] = _imageseg.block_left_get
    if _newclass:
        left = _swig_property(_imageseg.block_left_get, _imageseg.block_left_set)
    __swig_setmethods__["right"] = _imageseg.block_right_set
    __swig_getmethods__["right"] = _imageseg.block_right_get
    if _newclass:
        right = _swig_property(_imageseg.block_right_get, _imageseg.block_right_set)
    __swig_setmethods__["top"] = _imageseg.block_top_set
    __swig_getmethods__["top"] = _imageseg.block_top_get
    if _newclass:
        top = _swig_property(_imageseg.block_top_get, _imageseg.block_top_set)
    __swig_setmethods__["bottom"] = _imageseg.block_bottom_set
    __swig_getmethods__["bottom"] = _imageseg.block_bottom_get
    if _newclass:
        bottom = _swig_property(_imageseg.block_bottom_get, _imageseg.block_bottom_set)
    __swig_setmethods__["width"] = _imageseg.block_width_set
    __swig_getmethods__["width"] = _imageseg.block_width_get
    if _newclass:
        width = _swig_property(_imageseg.block_width_get, _imageseg.block_width_set)
    __swig_setmethods__["height"] = _imageseg.block_height_set
    __swig_getmethods__["height"] = _imageseg.block_height_get
    if _newclass:
        height = _swig_property(_imageseg.block_height_get, _imageseg.block_height_set)
    __swig_setmethods__["area"] = _imageseg.block_area_set
    __swig_getmethods__["area"] = _imageseg.block_area_get
    if _newclass:
        area = _swig_property(_imageseg.block_area_get, _imageseg.block_area_set)
    __swig_setmethods__["type"] = _imageseg.block_type_set
    __swig_getmethods__["type"] = _imageseg.block_type_get
    if _newclass:
        type = _swig_property(_imageseg.block_type_get, _imageseg.block_type_set)

    def __init__(self):
        this = _imageseg.new_block()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _imageseg.delete_block
    __del__ = lambda self: None
block_swigregister = _imageseg.block_swigregister
block_swigregister(block)


def search_right(x, y, xstep):
    return _imageseg.search_right(x, y, xstep)
search_right = _imageseg.search_right

def lowest_row(R):
    return _imageseg.lowest_row(R)
lowest_row = _imageseg.lowest_row

def checksquare(i, j):
    return _imageseg.checksquare(i, j)
checksquare = _imageseg.checksquare

def search_below(R, ry, ystep):
    return _imageseg.search_below(R, ry, ystep)
search_below = _imageseg.search_below

def locate_rects():
    return _imageseg.locate_rects()
locate_rects = _imageseg.locate_rects

def check_near(rectA, rects, wthreshold, hthreshold):
    return _imageseg.check_near(rectA, rects, wthreshold, hthreshold)
check_near = _imageseg.check_near

def generate_patterns(rects):
    return _imageseg.generate_patterns(rects)
generate_patterns = _imageseg.generate_patterns

def mbprl(left, right, top, bottom, mbrl, nbr, vbrl):
    return _imageseg.mbprl(left, right, top, bottom, mbrl, nbr, vbrl)
mbprl = _imageseg.mbprl

def get_pattern_para(patterns, line):
    return _imageseg.get_pattern_para(patterns, line)
get_pattern_para = _imageseg.get_pattern_para

def generate_boxes(patterns):
    return _imageseg.generate_boxes(patterns)
generate_boxes = _imageseg.generate_boxes

def extract_line_boxes(boxes, count_threshold):
    return _imageseg.extract_line_boxes(boxes, count_threshold)
extract_line_boxes = _imageseg.extract_line_boxes

def reclass(patterns, line_patterns):
    return _imageseg.reclass(patterns, line_patterns)
reclass = _imageseg.reclass

def get_block_para(blocks):
    return _imageseg.get_block_para(blocks)
get_block_para = _imageseg.get_block_para

def getblocks(blocks, type, index):
    return _imageseg.getblocks(blocks, type, index)
getblocks = _imageseg.getblocks

def cleanregion(blocks, threshold):
    return _imageseg.cleanregion(blocks, threshold)
cleanregion = _imageseg.cleanregion

def cleanregion2(block1, block2, threshold):
    return _imageseg.cleanregion2(block1, block2, threshold)
cleanregion2 = _imageseg.cleanregion2

def get_line_from_patterns(patterns):
    return _imageseg.get_line_from_patterns(patterns)
get_line_from_patterns = _imageseg.get_line_from_patterns

def cleanonenearanother(one, another, threshold, areathreshold, cpf):
    return _imageseg.cleanonenearanother(one, another, threshold, areathreshold, cpf)
cleanonenearanother = _imageseg.cleanonenearanother

def merge_blocks(blocks, w, h, oblk, lines):
    return _imageseg.merge_blocks(blocks, w, h, oblk, lines)
merge_blocks = _imageseg.merge_blocks

def deletesmallarea(blocks, threshold):
    return _imageseg.deletesmallarea(blocks, threshold)
deletesmallarea = _imageseg.deletesmallarea

def get_block_threhold(blocks):
    return _imageseg.get_block_threhold(blocks)
get_block_threhold = _imageseg.get_block_threhold

def get_max_area(blocks):
    return _imageseg.get_max_area(blocks)
get_max_area = _imageseg.get_max_area

def get_min_area(blocks):
    return _imageseg.get_min_area(blocks)
get_min_area = _imageseg.get_min_area

def formetablk(titleblock, txtblock, lines):
    return _imageseg.formetablk(titleblock, txtblock, lines)
formetablk = _imageseg.formetablk

def txtToline(blocks, lines):
    return _imageseg.txtToline(blocks, lines)
txtToline = _imageseg.txtToline

def generate_json(blocks, scale):
    return _imageseg.generate_json(blocks, scale)
generate_json = _imageseg.generate_json

def checkline(x, y, lines, threshold):
    return _imageseg.checkline(x, y, lines, threshold)
checkline = _imageseg.checkline

def top_extend(line, lines):
    return _imageseg.top_extend(line, lines)
top_extend = _imageseg.top_extend

def left_extend(line, lines):
    return _imageseg.left_extend(line, lines)
left_extend = _imageseg.left_extend

def bottom_extend(line, lines):
    return _imageseg.bottom_extend(line, lines)
bottom_extend = _imageseg.bottom_extend

def right_extend(line, lines):
    return _imageseg.right_extend(line, lines)
right_extend = _imageseg.right_extend

def extend_lines(lines):
    return _imageseg.extend_lines(lines)
extend_lines = _imageseg.extend_lines
# This file is compatible with both classic and new-style classes.



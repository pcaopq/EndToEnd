# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VD', [dirname(__file__)])
        except ImportError:
            import _VD
            return _VD
        if fp is not None:
            try:
                _mod = imp.load_module('_VD', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VD = swig_import_helper()
    del swig_import_helper
else:
    import _VD
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VD.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VD.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VD.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VD.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VD.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VD.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VD.SwigPyIterator_copy(self)

    def next(self):
        return _VD.SwigPyIterator_next(self)

    def __next__(self):
        return _VD.SwigPyIterator___next__(self)

    def previous(self):
        return _VD.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VD.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VD.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VD.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VD.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VD.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VD.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VD.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VD.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def new_intp():
    return _VD.new_intp()
new_intp = _VD.new_intp

def copy_intp(value):
    return _VD.copy_intp(value)
copy_intp = _VD.copy_intp

def delete_intp(obj):
    return _VD.delete_intp(obj)
delete_intp = _VD.delete_intp

def intp_assign(obj, value):
    return _VD.intp_assign(obj, value)
intp_assign = _VD.intp_assign

def intp_value(obj):
    return _VD.intp_value(obj)
intp_value = _VD.intp_value
class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VD.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VD.vectori___nonzero__(self)

    def __bool__(self):
        return _VD.vectori___bool__(self)

    def __len__(self):
        return _VD.vectori___len__(self)

    def __getslice__(self, i, j):
        return _VD.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VD.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VD.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VD.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VD.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VD.vectori___setitem__(self, *args)

    def pop(self):
        return _VD.vectori_pop(self)

    def append(self, x):
        return _VD.vectori_append(self, x)

    def empty(self):
        return _VD.vectori_empty(self)

    def size(self):
        return _VD.vectori_size(self)

    def swap(self, v):
        return _VD.vectori_swap(self, v)

    def begin(self):
        return _VD.vectori_begin(self)

    def end(self):
        return _VD.vectori_end(self)

    def rbegin(self):
        return _VD.vectori_rbegin(self)

    def rend(self):
        return _VD.vectori_rend(self)

    def clear(self):
        return _VD.vectori_clear(self)

    def get_allocator(self):
        return _VD.vectori_get_allocator(self)

    def pop_back(self):
        return _VD.vectori_pop_back(self)

    def erase(self, *args):
        return _VD.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _VD.new_vectori(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _VD.vectori_push_back(self, x)

    def front(self):
        return _VD.vectori_front(self)

    def back(self):
        return _VD.vectori_back(self)

    def assign(self, n, x):
        return _VD.vectori_assign(self, n, x)

    def resize(self, *args):
        return _VD.vectori_resize(self, *args)

    def insert(self, *args):
        return _VD.vectori_insert(self, *args)

    def reserve(self, n):
        return _VD.vectori_reserve(self, n)

    def capacity(self):
        return _VD.vectori_capacity(self)
    __swig_destroy__ = _VD.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _VD.vectori_swigregister
vectori_swigregister(vectori)

class vectorb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorb, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VD.vectorb_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VD.vectorb___nonzero__(self)

    def __bool__(self):
        return _VD.vectorb___bool__(self)

    def __len__(self):
        return _VD.vectorb___len__(self)

    def __getslice__(self, i, j):
        return _VD.vectorb___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VD.vectorb___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VD.vectorb___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VD.vectorb___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VD.vectorb___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VD.vectorb___setitem__(self, *args)

    def pop(self):
        return _VD.vectorb_pop(self)

    def append(self, x):
        return _VD.vectorb_append(self, x)

    def empty(self):
        return _VD.vectorb_empty(self)

    def size(self):
        return _VD.vectorb_size(self)

    def swap(self, v):
        return _VD.vectorb_swap(self, v)

    def begin(self):
        return _VD.vectorb_begin(self)

    def end(self):
        return _VD.vectorb_end(self)

    def rbegin(self):
        return _VD.vectorb_rbegin(self)

    def rend(self):
        return _VD.vectorb_rend(self)

    def clear(self):
        return _VD.vectorb_clear(self)

    def get_allocator(self):
        return _VD.vectorb_get_allocator(self)

    def pop_back(self):
        return _VD.vectorb_pop_back(self)

    def erase(self, *args):
        return _VD.vectorb_erase(self, *args)

    def __init__(self, *args):
        this = _VD.new_vectorb(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _VD.vectorb_push_back(self, x)

    def front(self):
        return _VD.vectorb_front(self)

    def back(self):
        return _VD.vectorb_back(self)

    def assign(self, n, x):
        return _VD.vectorb_assign(self, n, x)

    def resize(self, *args):
        return _VD.vectorb_resize(self, *args)

    def insert(self, *args):
        return _VD.vectorb_insert(self, *args)

    def reserve(self, n):
        return _VD.vectorb_reserve(self, n)

    def capacity(self):
        return _VD.vectorb_capacity(self)
    __swig_destroy__ = _VD.delete_vectorb
    __del__ = lambda self: None
vectorb_swigregister = _VD.vectorb_swigregister
vectorb_swigregister(vectorb)

class vectorf1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf1, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VD.vectorf1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VD.vectorf1___nonzero__(self)

    def __bool__(self):
        return _VD.vectorf1___bool__(self)

    def __len__(self):
        return _VD.vectorf1___len__(self)

    def __getslice__(self, i, j):
        return _VD.vectorf1___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VD.vectorf1___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VD.vectorf1___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VD.vectorf1___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VD.vectorf1___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VD.vectorf1___setitem__(self, *args)

    def pop(self):
        return _VD.vectorf1_pop(self)

    def append(self, x):
        return _VD.vectorf1_append(self, x)

    def empty(self):
        return _VD.vectorf1_empty(self)

    def size(self):
        return _VD.vectorf1_size(self)

    def swap(self, v):
        return _VD.vectorf1_swap(self, v)

    def begin(self):
        return _VD.vectorf1_begin(self)

    def end(self):
        return _VD.vectorf1_end(self)

    def rbegin(self):
        return _VD.vectorf1_rbegin(self)

    def rend(self):
        return _VD.vectorf1_rend(self)

    def clear(self):
        return _VD.vectorf1_clear(self)

    def get_allocator(self):
        return _VD.vectorf1_get_allocator(self)

    def pop_back(self):
        return _VD.vectorf1_pop_back(self)

    def erase(self, *args):
        return _VD.vectorf1_erase(self, *args)

    def __init__(self, *args):
        this = _VD.new_vectorf1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _VD.vectorf1_push_back(self, x)

    def front(self):
        return _VD.vectorf1_front(self)

    def back(self):
        return _VD.vectorf1_back(self)

    def assign(self, n, x):
        return _VD.vectorf1_assign(self, n, x)

    def resize(self, *args):
        return _VD.vectorf1_resize(self, *args)

    def insert(self, *args):
        return _VD.vectorf1_insert(self, *args)

    def reserve(self, n):
        return _VD.vectorf1_reserve(self, n)

    def capacity(self):
        return _VD.vectorf1_capacity(self)
    __swig_destroy__ = _VD.delete_vectorf1
    __del__ = lambda self: None
vectorf1_swigregister = _VD.vectorf1_swigregister
vectorf1_swigregister(vectorf1)

class vectorf2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VD.vectorf2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VD.vectorf2___nonzero__(self)

    def __bool__(self):
        return _VD.vectorf2___bool__(self)

    def __len__(self):
        return _VD.vectorf2___len__(self)

    def __getslice__(self, i, j):
        return _VD.vectorf2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VD.vectorf2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VD.vectorf2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VD.vectorf2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VD.vectorf2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VD.vectorf2___setitem__(self, *args)

    def pop(self):
        return _VD.vectorf2_pop(self)

    def append(self, x):
        return _VD.vectorf2_append(self, x)

    def empty(self):
        return _VD.vectorf2_empty(self)

    def size(self):
        return _VD.vectorf2_size(self)

    def swap(self, v):
        return _VD.vectorf2_swap(self, v)

    def begin(self):
        return _VD.vectorf2_begin(self)

    def end(self):
        return _VD.vectorf2_end(self)

    def rbegin(self):
        return _VD.vectorf2_rbegin(self)

    def rend(self):
        return _VD.vectorf2_rend(self)

    def clear(self):
        return _VD.vectorf2_clear(self)

    def get_allocator(self):
        return _VD.vectorf2_get_allocator(self)

    def pop_back(self):
        return _VD.vectorf2_pop_back(self)

    def erase(self, *args):
        return _VD.vectorf2_erase(self, *args)

    def __init__(self, *args):
        this = _VD.new_vectorf2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _VD.vectorf2_push_back(self, x)

    def front(self):
        return _VD.vectorf2_front(self)

    def back(self):
        return _VD.vectorf2_back(self)

    def assign(self, n, x):
        return _VD.vectorf2_assign(self, n, x)

    def resize(self, *args):
        return _VD.vectorf2_resize(self, *args)

    def insert(self, *args):
        return _VD.vectorf2_insert(self, *args)

    def reserve(self, n):
        return _VD.vectorf2_reserve(self, n)

    def capacity(self):
        return _VD.vectorf2_capacity(self)
    __swig_destroy__ = _VD.delete_vectorf2
    __del__ = lambda self: None
vectorf2_swigregister = _VD.vectorf2_swigregister
vectorf2_swigregister(vectorf2)

class vectorf3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf3, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VD.vectorf3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VD.vectorf3___nonzero__(self)

    def __bool__(self):
        return _VD.vectorf3___bool__(self)

    def __len__(self):
        return _VD.vectorf3___len__(self)

    def __getslice__(self, i, j):
        return _VD.vectorf3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VD.vectorf3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VD.vectorf3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VD.vectorf3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VD.vectorf3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VD.vectorf3___setitem__(self, *args)

    def pop(self):
        return _VD.vectorf3_pop(self)

    def append(self, x):
        return _VD.vectorf3_append(self, x)

    def empty(self):
        return _VD.vectorf3_empty(self)

    def size(self):
        return _VD.vectorf3_size(self)

    def swap(self, v):
        return _VD.vectorf3_swap(self, v)

    def begin(self):
        return _VD.vectorf3_begin(self)

    def end(self):
        return _VD.vectorf3_end(self)

    def rbegin(self):
        return _VD.vectorf3_rbegin(self)

    def rend(self):
        return _VD.vectorf3_rend(self)

    def clear(self):
        return _VD.vectorf3_clear(self)

    def get_allocator(self):
        return _VD.vectorf3_get_allocator(self)

    def pop_back(self):
        return _VD.vectorf3_pop_back(self)

    def erase(self, *args):
        return _VD.vectorf3_erase(self, *args)

    def __init__(self, *args):
        this = _VD.new_vectorf3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _VD.vectorf3_push_back(self, x)

    def front(self):
        return _VD.vectorf3_front(self)

    def back(self):
        return _VD.vectorf3_back(self)

    def assign(self, n, x):
        return _VD.vectorf3_assign(self, n, x)

    def resize(self, *args):
        return _VD.vectorf3_resize(self, *args)

    def insert(self, *args):
        return _VD.vectorf3_insert(self, *args)

    def reserve(self, n):
        return _VD.vectorf3_reserve(self, n)

    def capacity(self):
        return _VD.vectorf3_capacity(self)
    __swig_destroy__ = _VD.delete_vectorf3
    __del__ = lambda self: None
vectorf3_swigregister = _VD.vectorf3_swigregister
vectorf3_swigregister(vectorf3)

class VerticalDominance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VerticalDominance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VerticalDominance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contents"] = _VD.VerticalDominance_contents_set
    __swig_getmethods__["contents"] = _VD.VerticalDominance_contents_get
    if _newclass:
        contents = _swig_property(_VD.VerticalDominance_contents_get, _VD.VerticalDominance_contents_set)
    __swig_setmethods__["coors"] = _VD.VerticalDominance_coors_set
    __swig_getmethods__["coors"] = _VD.VerticalDominance_coors_get
    if _newclass:
        coors = _swig_property(_VD.VerticalDominance_coors_get, _VD.VerticalDominance_coors_set)
    __swig_setmethods__["height"] = _VD.VerticalDominance_height_set
    __swig_getmethods__["height"] = _VD.VerticalDominance_height_get
    if _newclass:
        height = _swig_property(_VD.VerticalDominance_height_get, _VD.VerticalDominance_height_set)
    __swig_setmethods__["textcoors"] = _VD.VerticalDominance_textcoors_set
    __swig_getmethods__["textcoors"] = _VD.VerticalDominance_textcoors_get
    if _newclass:
        textcoors = _swig_property(_VD.VerticalDominance_textcoors_get, _VD.VerticalDominance_textcoors_set)
    __swig_setmethods__["titlecoors"] = _VD.VerticalDominance_titlecoors_set
    __swig_getmethods__["titlecoors"] = _VD.VerticalDominance_titlecoors_get
    if _newclass:
        titlecoors = _swig_property(_VD.VerticalDominance_titlecoors_get, _VD.VerticalDominance_titlecoors_set)
    __swig_setmethods__["assignments"] = _VD.VerticalDominance_assignments_set
    __swig_getmethods__["assignments"] = _VD.VerticalDominance_assignments_get
    if _newclass:
        assignments = _swig_property(_VD.VerticalDominance_assignments_get, _VD.VerticalDominance_assignments_set)
    __swig_setmethods__["articleblocks"] = _VD.VerticalDominance_articleblocks_set
    __swig_getmethods__["articleblocks"] = _VD.VerticalDominance_articleblocks_get
    if _newclass:
        articleblocks = _swig_property(_VD.VerticalDominance_articleblocks_get, _VD.VerticalDominance_articleblocks_set)

    def __init__(self):
        this = _VD.new_VerticalDominance()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def tocorners(self, y, x, h, w):
        return _VD.VerticalDominance_tocorners(self, y, x, h, w)

    def vector_sum(self, v):
        return _VD.VerticalDominance_vector_sum(self, v)

    def join_hori(self, coordinates):
        return _VD.VerticalDominance_join_hori(self, coordinates)

    def join_hori2(self, coors1, coors2):
        return _VD.VerticalDominance_join_hori2(self, coors1, coors2)

    def join_verti(self, coordinates):
        return _VD.VerticalDominance_join_verti(self, coordinates)

    def parse(self, scrapedname):
        return _VD.VerticalDominance_parse(self, scrapedname)

    def findtitleheight(self):
        return _VD.VerticalDominance_findtitleheight(self)

    def adjoins(self, a, b):
        return _VD.VerticalDominance_adjoins(self, a, b)

    def getstrips(self):
        return _VD.VerticalDominance_getstrips(self)

    def gettitleblocks(self):
        return _VD.VerticalDominance_gettitleblocks(self)

    def dominates(self, a, b):
        return _VD.VerticalDominance_dominates(self, a, b)

    def supports(self, a, b):
        return _VD.VerticalDominance_supports(self, a, b)

    def assign_textblocks(self):
        return _VD.VerticalDominance_assign_textblocks(self)

    def group_textblocks(self):
        return _VD.VerticalDominance_group_textblocks(self)
    __swig_destroy__ = _VD.delete_VerticalDominance
    __del__ = lambda self: None
VerticalDominance_swigregister = _VD.VerticalDominance_swigregister
VerticalDominance_swigregister(VerticalDominance)

# This file is compatible with both classic and new-style classes.


